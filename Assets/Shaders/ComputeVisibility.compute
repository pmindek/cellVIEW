// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ClearVisibilityFlags
#pragma kernel ComputeVisibility
#pragma kernel ClearHistograms

Texture2D<int> _ItemBuffer;
RWStructuredBuffer<int> _FlagBuffer;

[numthreads(64, 1, 1)]
void ClearVisibilityFlags(uint3 id : SV_DispatchThreadID)
{
    _FlagBuffer[id.x] = 0;
}

[numthreads(8, 8, 1)]
void ComputeVisibility(uint3 id : SV_DispatchThreadID)
{
    int idx = _ItemBuffer[id.xy];
    if (idx >= 0) _FlagBuffer[idx] = 1;
}

//histograms
struct HistStruct
{
	int parent; //also write data to this id, unless it is < 0

	int all;
	int cutaway;
	int occluding;
	int visible;

	int pad0;
	int pad1;
	int pad2;
};

RWStructuredBuffer<HistStruct> _Histograms;

[numthreads(64, 1, 1)]
void ClearHistograms(uint3 id : SV_DispatchThreadID)
{
    HistStruct clearHist = _Histograms[id.x];
	clearHist.all = 0;
	clearHist.cutaway = 0;
	clearHist.occluding = 0;
	clearHist.visible = 0;

    _Histograms[id.x] = clearHist;
}
